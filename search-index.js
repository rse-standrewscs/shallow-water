var searchIndex = JSON.parse('{\
"shallow_water":{"doc":"","i":[[0,"balinit","shallow_water","Re-initialises a flow with balanced fields obtained from…",null,null],[5,"balinit","shallow_water::balinit","",null,[[["parameters",3]],["result",6]]],[0,"nhswps","shallow_water","",null,null],[3,"Output","shallow_water::nhswps","",null,null],[12,"ecomp","","",0,null],[12,"monitor","","",0,null],[12,"spectra","","",0,null],[12,"d3ql","","",0,null],[12,"d3d","","",0,null],[12,"d3g","","",0,null],[12,"d3r","","",0,null],[12,"d3w","","",0,null],[12,"d3pn","","",0,null],[12,"d2q","","",0,null],[12,"d2d","","",0,null],[12,"d2g","","",0,null],[12,"d2h","","",0,null],[12,"d2zeta","","",0,null],[3,"State","","",null,null],[12,"spectral","","",1,null],[12,"u","","",1,null],[12,"v","","",1,null],[12,"w","","",1,null],[12,"z","","",1,null],[12,"zx","","",1,null],[12,"zy","","",1,null],[12,"r","","",1,null],[12,"ri","","",1,null],[12,"aa","","",1,null],[12,"zeta","","",1,null],[12,"pn","","",1,null],[12,"dpn","","",1,null],[12,"ps","","",1,null],[12,"qs","","",1,null],[12,"ds","","",1,null],[12,"gs","","",1,null],[12,"t","","",1,null],[12,"ngsave","","",1,null],[12,"itime","","",1,null],[12,"jtime","","",1,null],[12,"ggen","","",1,null],[5,"nhswps","","",null,[[["parameters",3]],["result",6]]],[5,"savegrid","","",null,[[["state",3],["output",3]],["result",6]]],[0,"advance","","",null,null],[5,"advance","shallow_water::nhswps::advance","Advances fields from time t to t+dt using an iterative…",null,[[["state",3],["output",3]],["result",6]]],[0,"coeffs","shallow_water::nhswps","",null,null],[5,"coeffs","shallow_water::nhswps::coeffs","Calculates the fixed coefficients used in the pressure…",null,[[["arrayviewmut3",6],["state",3]]]],[0,"cpsource","shallow_water::nhswps","",null,null],[5,"cpsource","shallow_water::nhswps::cpsource","Finds the part of the pressure source which does not vary…",null,[[["arrayviewmut3",6],["state",3]]]],[0,"psolve","shallow_water::nhswps","",null,null],[5,"psolve","shallow_water::nhswps::psolve","Solves for the nonhydrostatic part of the pressure (pn)…",null,[[["state",3]]]],[0,"source","shallow_water::nhswps","",null,null],[5,"source","shallow_water::nhswps::source","Gets the nonlinear source terms for linearised PV,…",null,[[["arrayviewmut3",6],["state",3]]]],[0,"vertical","shallow_water::nhswps","",null,null],[5,"vertical","shallow_water::nhswps::vertical","Calculates layer heights (z), as well as dz/dx & dz/dy (zx…",null,[[["state",3]]]],[11,"from_path","shallow_water::nhswps","",0,[[["asref",8],["path",3]],["result",6]]],[11,"defragment","","Reinitializes all arrays so that each has contiguous memory",1,[[]]],[0,"swto3d","shallow_water","",null,null],[5,"swto3d","shallow_water::swto3d","",null,[[["parameters",3]],["result",6]]],[0,"vstrip","shallow_water","",null,null],[5,"init_pv_strip","shallow_water::vstrip","",null,[[["parameters",3]],["result",6]]],[0,"spectral","shallow_water","Module containing subroutines for spectral operations,…",null,null],[3,"Spectral","shallow_water::spectral","",null,null],[12,"hlap","","",2,null],[12,"glap","","",2,null],[12,"rlap","","",2,null],[12,"helm","","",2,null],[12,"c2g2","","",2,null],[12,"simp","","",2,null],[12,"rope","","",2,null],[12,"fope","","",2,null],[12,"filt","","",2,null],[12,"diss","","",2,null],[12,"opak","","",2,null],[12,"rdis","","",2,null],[12,"etdv","","",2,null],[12,"htdv","","",2,null],[12,"ap","","",2,null],[12,"etd1","","",2,null],[12,"htd1","","",2,null],[12,"theta","","",2,null],[12,"weight","","",2,null],[12,"hrkx","","",2,null],[12,"hrky","","",2,null],[12,"rk","","",2,null],[12,"d2fft","","",2,null],[12,"spmf","","",2,null],[12,"alk","","",2,null],[12,"kmag","","",2,null],[12,"kmax","","",2,null],[12,"kmaxred","","",2,null],[12,"ng","","",2,null],[12,"nz","","",2,null],[11,"new","","",2,[[]]],[11,"main_invert","","Given the PV anomaly qs, divergence ds and acceleration…",2,[[["arrayviewmut3",6],["arrayview3",6]]]],[11,"jacob","","Computes the (xy) Jacobian of aa and bb and returns it in…",2,[[["arrayview2",6],["arrayviewmut2",6]]]],[11,"divs","","Computes the divergence of (aa,bb) and returns it in cs.…",2,[[["arrayview2",6],["arrayviewmut2",6]]]],[11,"ptospc3d","","Transforms a physical 3d field fp to spectral space…",2,[[["arrayviewmut3",6],["arrayview3",6]]]],[11,"spctop3d","","Transforms a spectral 3d field fs to physical space…",2,[[["arrayviewmut3",6],["arrayview3",6]]]],[11,"deal3d","","Filters (horizontally) a physical 3d field fp (overwrites…",2,[[["arrayviewmut3",6]]]],[11,"deal2d","","Filters (horizontally) a physical 2d field fp (overwrites…",2,[[["arrayviewmut2",6]]]],[11,"spec1d","","Computes the 1d spectrum of a spectral field ss and…",2,[[]]],[0,"sta2dfft","shallow_water","This module performs FFTs in two directions on two…",null,null],[3,"D2FFT","shallow_water::sta2dfft","",null,null],[12,"nx","","",3,null],[12,"ny","","",3,null],[12,"xfactors","","",3,null],[12,"yfactors","","",3,null],[12,"xtrig","","",3,null],[12,"ytrig","","",3,null],[11,"new","","This subroutine performs the initialisation work for all…",3,[[]]],[11,"ptospc","","Performs a physical -> spectral transform of a variable…",3,[[["arrayviewmut2",6]]]],[11,"spctop","","Performs a spectral -> physical transform of a variable…",3,[[["arrayviewmut2",6]]]],[11,"xderiv","","Computes der = d(var)/dx, spectrally, for a variable…",3,[[["arrayview2",6],["arrayviewmut2",6]]]],[11,"yderiv","","Computes der = d(var)/dy, spectrally, for a variable…",3,[[["arrayview2",6],["arrayviewmut2",6]]]],[0,"stafft","shallow_water","Fourier transform module. This is not a general purpose…",null,null],[5,"forrdx6","shallow_water::stafft","Radix six physical to Hermitian FFT with \'decimation in…",null,[[["arrayviewmut3",6],["arrayview2",6],["arrayview3",6]]]],[5,"forrdx5","","Radix five physical to Hermitian FFT with \'decimation in…",null,[[["arrayviewmut3",6],["arrayview2",6],["arrayview3",6]]]],[5,"forrdx4","","Radix four physical to Hermitian FFT with \'decimation in…",null,[[["arrayviewmut3",6],["arrayview2",6],["arrayview3",6]]]],[5,"forrdx3","","Radix three physical to Hermitian FFT with \'decimation in…",null,[[["arrayviewmut3",6],["arrayview2",6],["arrayview3",6]]]],[5,"forrdx2","","Radix two physical to Hermitian FFT with \'decimation in…",null,[[["arrayviewmut3",6],["arrayview2",6],["arrayview3",6]]]],[5,"revrdx6","","Radix six Hermitian to physical FFT with \'decimation in…",null,[[["arrayviewmut3",6],["arrayview2",6],["arrayview3",6]]]],[5,"revrdx5","","Radix five Hermitian to physical FFT with \'decimation in…",null,[[["arrayviewmut3",6],["arrayview2",6],["arrayview3",6]]]],[5,"revrdx4","","Radix four Hermitian to physical FFT with \'decimation in…",null,[[["arrayviewmut3",6],["arrayview2",6],["arrayview3",6]]]],[5,"revrdx3","","Radix three Hermitian to physical FFT with \'decimation in…",null,[[["arrayviewmut3",6],["arrayview2",6],["arrayview3",6]]]],[5,"revrdx2","","Radix two Hermitian to physical FFT with \'decimation in…",null,[[["arrayviewmut3",6],["arrayview2",6],["arrayview3",6]]]],[5,"initfft","","Subroutine performs initialisation work for all the…",null,[[]]],[5,"factorisen","","",null,[[]]],[5,"forfft","","Main physical to spectral (forward) FFT routine. Performs…",null,[[["arrayviewmut2",6]]]],[5,"revfft","","Main spectral to physical (reverse) FFT routine. Performs…",null,[[["arrayviewmut2",6]]]],[0,"constants","shallow_water","",null,null],[17,"SINFPI3","shallow_water::constants","",null,null],[17,"RTF516","","",null,null],[17,"SINF2PI5","","",null,null],[17,"SINRAT","","",null,null],[17,"COF","","",null,null],[17,"CGW","","",null,null],[17,"HBAR","","",null,null],[17,"CDAMP","","",null,null],[17,"NNU","","",null,null],[17,"CSQ","","",null,null],[17,"FSQ","","",null,null],[17,"COFI","","",null,null],[17,"GRAVITY","","",null,null],[0,"parameters","shallow_water","",null,null],[3,"Parameters","shallow_water::parameters","Simulation parameters",null,null],[12,"numerical","","",4,null],[12,"physical","","",4,null],[12,"environment","","",4,null],[3,"Numerical","","",null,null],[12,"grid_resolution","","Inversion grid resolution in both x and y",5,null],[12,"vertical_layers","","Number of vertical layers",5,null],[12,"time_step","","Simulation time step size",5,null],[12,"duration","","Total duration of the simulation",5,null],[12,"save_interval","","Interval of saving grid data",5,null],[12,"max_pressure_difference","","Maximum pressure difference on convergence",5,null],[12,"strip_width","","Strip width",5,null],[12,"a2","","Value of A2 in displacement equation",5,null],[12,"a3","","Value of A3 in displacement equation",5,null],[3,"Physical","","",null,null],[12,"coriolis_frequency","","Constant Coriolis frequency f",6,null],[12,"gravity_wave_speed","","Short-scale gravity wave speed c",6,null],[12,"mean_fluid_depth","","Mean fluid depth (conserved by mass conservation)",6,null],[12,"damping","","This times f is the damping rate on wavenumber…",6,null],[12,"nnu","","Viscosity constant",6,null],[3,"Environment","","",null,null],[12,"threads","","Number of threads in threadpool, auto detected if 0",7,null],[12,"output_directory","","Directory to write output to during execution",7,null],[0,"utils","shallow_water","",null,null],[5,"view2d","shallow_water::utils","",null,[[],["arrayview2",6]]],[5,"view3d","","",null,[[],["arrayview3",6]]],[5,"viewmut2d","","",null,[[],["arrayviewmut2",6]]],[5,"viewmut3d","","",null,[[],["arrayviewmut3",6]]],[5,"arr2zero","","",null,[[],["array2",6]]],[5,"arr3zero","","",null,[[],["array3",6]]],[14,"array2_from_file","shallow_water","",null,null],[14,"array3_from_file","","",null,null],[11,"from","shallow_water::nhswps","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","shallow_water::spectral","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","shallow_water::sta2dfft","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","shallow_water::parameters","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"clone","shallow_water::nhswps","",1,[[],["state",3]]],[11,"clone","shallow_water::spectral","",2,[[],["spectral",3]]],[11,"clone","shallow_water::sta2dfft","",3,[[],["d2fft",3]]],[11,"default","shallow_water::parameters","",4,[[],["parameters",3]]],[11,"default","","",5,[[]]],[11,"default","","",6,[[]]],[11,"default","","",7,[[]]],[11,"eq","shallow_water::spectral","",2,[[["spectral",3]]]],[11,"ne","","",2,[[["spectral",3]]]],[11,"eq","shallow_water::sta2dfft","",3,[[["d2fft",3]]]],[11,"ne","","",3,[[["d2fft",3]]]],[11,"eq","shallow_water::parameters","",4,[[["parameters",3]]]],[11,"ne","","",4,[[["parameters",3]]]],[11,"eq","","",5,[[["numerical",3]]]],[11,"ne","","",5,[[["numerical",3]]]],[11,"eq","","",6,[[["physical",3]]]],[11,"ne","","",6,[[["physical",3]]]],[11,"eq","","",7,[[["environment",3]]]],[11,"ne","","",7,[[["environment",3]]]],[11,"fmt","shallow_water::nhswps","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","shallow_water::spectral","",2,[[["formatter",3]],["result",6]]],[11,"fmt","shallow_water::sta2dfft","",3,[[["formatter",3]],["result",6]]],[11,"fmt","shallow_water::parameters","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"serialize","shallow_water::nhswps","",1,[[],["result",4]]],[11,"serialize","shallow_water::spectral","",2,[[],["result",4]]],[11,"serialize","shallow_water::sta2dfft","",3,[[],["result",4]]],[11,"deserialize","shallow_water::nhswps","",1,[[],["result",4]]],[11,"deserialize","shallow_water::spectral","",2,[[],["result",4]]],[11,"deserialize","shallow_water::sta2dfft","",3,[[],["result",4]]],[11,"deserialize","shallow_water::parameters","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]]],"p":[[3,"Output"],[3,"State"],[3,"Spectral"],[3,"D2FFT"],[3,"Parameters"],[3,"Numerical"],[3,"Physical"],[3,"Environment"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);